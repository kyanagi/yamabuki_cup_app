class Player < ::ApplicationRecord
  extend ::_ActiveRecord_Relation_ClassMethods[::Player, ::Player::ActiveRecord_Relation, ::Integer]

  module GeneratedAttributeMethods
    def id: () -> ::Integer

    def id=: (::Integer) -> ::Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ ::Integer?, ::Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> ::Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> ::Array[::Integer?]?

    def id_previously_was: () -> ::Integer?

    def id_before_last_save: () -> ::Integer?

    def id_change_to_be_saved: () -> ::Array[::Integer?]?

    def id_in_database: () -> ::Integer?

    def saved_change_to_id: () -> ::Array[::Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def created_at: () -> ::ActiveSupport::TimeWithZone

    def created_at=: (::ActiveSupport::TimeWithZone) -> ::ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ::ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ::ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ::ActiveSupport::TimeWithZone

    def updated_at=: (::ActiveSupport::TimeWithZone) -> ::ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ::ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ::ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void
  end
  include GeneratedAttributeMethods
  def question_player_results: () -> ::QuestionPlayerResult::ActiveRecord_Associations_CollectionProxy
  def question_player_results=: (::QuestionPlayerResult::ActiveRecord_Associations_CollectionProxy | ::Array[::QuestionPlayerResult]) -> (::QuestionPlayerResult::ActiveRecord_Associations_CollectionProxy | ::Array[::QuestionPlayerResult])
  def question_player_result_ids: () -> ::Array[::Integer]
  def question_player_result_ids=: (::Array[::Integer]) -> ::Array[::Integer]
  def matchings: () -> ::Matching::ActiveRecord_Associations_CollectionProxy
  def matchings=: (::Matching::ActiveRecord_Associations_CollectionProxy | ::Array[::Matching]) -> (::Matching::ActiveRecord_Associations_CollectionProxy | ::Array[::Matching])
  def matching_ids: () -> ::Array[::Integer]
  def matching_ids=: (::Array[::Integer]) -> ::Array[::Integer]
  def yontaku_player_result: () -> ::YontakuPlayerResult?
  def yontaku_player_result=: (::YontakuPlayerResult?) -> ::YontakuPlayerResult?
  def build_yontaku_player_result: (?untyped) -> ::YontakuPlayerResult
  def create_yontaku_player_result: (untyped) -> ::YontakuPlayerResult
  def create_yontaku_player_result!: (untyped) -> ::YontakuPlayerResult
  def reload_yontaku_player_result: () -> ::YontakuPlayerResult?
  def round3_course_preference: () -> ::Round3CoursePreference?
  def round3_course_preference=: (::Round3CoursePreference?) -> ::Round3CoursePreference?
  def build_round3_course_preference: (?untyped) -> ::Round3CoursePreference
  def create_round3_course_preference: (untyped) -> ::Round3CoursePreference
  def create_round3_course_preference!: (untyped) -> ::Round3CoursePreference
  def reload_round3_course_preference: () -> ::Round3CoursePreference?

  module GeneratedAssociationMethods
  end
  include GeneratedAssociationMethods

  module GeneratedRelationMethods
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include ::Player::GeneratedRelationMethods
    include ::_ActiveRecord_Relation[::Player, ::Integer]
    include ::Enumerable[::Player]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include ::Player::GeneratedRelationMethods
    include ::_ActiveRecord_Relation[::Player, ::Integer]
  end
end
