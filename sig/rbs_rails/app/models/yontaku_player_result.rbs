class YontakuPlayerResult < ::ApplicationRecord
  extend ::_ActiveRecord_Relation_ClassMethods[::YontakuPlayerResult, ::YontakuPlayerResult::ActiveRecord_Relation, ::Integer]

  module GeneratedAttributeMethods
    def id: () -> ::Integer

    def id=: (::Integer) -> ::Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ ::Integer?, ::Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> ::Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> ::Array[::Integer?]?

    def id_previously_was: () -> ::Integer?

    def id_before_last_save: () -> ::Integer?

    def id_change_to_be_saved: () -> ::Array[::Integer?]?

    def id_in_database: () -> ::Integer?

    def saved_change_to_id: () -> ::Array[::Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def player_id: () -> ::Integer

    def player_id=: (::Integer) -> ::Integer

    def player_id?: () -> bool

    def player_id_changed?: () -> bool

    def player_id_change: () -> [ ::Integer?, ::Integer? ]

    def player_id_will_change!: () -> void

    def player_id_was: () -> ::Integer?

    def player_id_previously_changed?: () -> bool

    def player_id_previous_change: () -> ::Array[::Integer?]?

    def player_id_previously_was: () -> ::Integer?

    def player_id_before_last_save: () -> ::Integer?

    def player_id_change_to_be_saved: () -> ::Array[::Integer?]?

    def player_id_in_database: () -> ::Integer?

    def saved_change_to_player_id: () -> ::Array[::Integer?]?

    def saved_change_to_player_id?: () -> bool

    def will_save_change_to_player_id?: () -> bool

    def restore_player_id!: () -> void

    def clear_player_id_change: () -> void

    def rank: () -> ::Integer

    def rank=: (::Integer) -> ::Integer

    def rank?: () -> bool

    def rank_changed?: () -> bool

    def rank_change: () -> [ ::Integer?, ::Integer? ]

    def rank_will_change!: () -> void

    def rank_was: () -> ::Integer?

    def rank_previously_changed?: () -> bool

    def rank_previous_change: () -> ::Array[::Integer?]?

    def rank_previously_was: () -> ::Integer?

    def rank_before_last_save: () -> ::Integer?

    def rank_change_to_be_saved: () -> ::Array[::Integer?]?

    def rank_in_database: () -> ::Integer?

    def saved_change_to_rank: () -> ::Array[::Integer?]?

    def saved_change_to_rank?: () -> bool

    def will_save_change_to_rank?: () -> bool

    def restore_rank!: () -> void

    def clear_rank_change: () -> void

    def score: () -> ::Integer

    def score=: (::Integer) -> ::Integer

    def score?: () -> bool

    def score_changed?: () -> bool

    def score_change: () -> [ ::Integer?, ::Integer? ]

    def score_will_change!: () -> void

    def score_was: () -> ::Integer?

    def score_previously_changed?: () -> bool

    def score_previous_change: () -> ::Array[::Integer?]?

    def score_previously_was: () -> ::Integer?

    def score_before_last_save: () -> ::Integer?

    def score_change_to_be_saved: () -> ::Array[::Integer?]?

    def score_in_database: () -> ::Integer?

    def saved_change_to_score: () -> ::Array[::Integer?]?

    def saved_change_to_score?: () -> bool

    def will_save_change_to_score?: () -> bool

    def restore_score!: () -> void

    def clear_score_change: () -> void

    def approximation_quiz_diff1: () -> ::Integer

    def approximation_quiz_diff1=: (::Integer) -> ::Integer

    def approximation_quiz_diff1?: () -> bool

    def approximation_quiz_diff1_changed?: () -> bool

    def approximation_quiz_diff1_change: () -> [ ::Integer?, ::Integer? ]

    def approximation_quiz_diff1_will_change!: () -> void

    def approximation_quiz_diff1_was: () -> ::Integer?

    def approximation_quiz_diff1_previously_changed?: () -> bool

    def approximation_quiz_diff1_previous_change: () -> ::Array[::Integer?]?

    def approximation_quiz_diff1_previously_was: () -> ::Integer?

    def approximation_quiz_diff1_before_last_save: () -> ::Integer?

    def approximation_quiz_diff1_change_to_be_saved: () -> ::Array[::Integer?]?

    def approximation_quiz_diff1_in_database: () -> ::Integer?

    def saved_change_to_approximation_quiz_diff1: () -> ::Array[::Integer?]?

    def saved_change_to_approximation_quiz_diff1?: () -> bool

    def will_save_change_to_approximation_quiz_diff1?: () -> bool

    def restore_approximation_quiz_diff1!: () -> void

    def clear_approximation_quiz_diff1_change: () -> void

    def approximation_quiz_diff2: () -> ::Integer

    def approximation_quiz_diff2=: (::Integer) -> ::Integer

    def approximation_quiz_diff2?: () -> bool

    def approximation_quiz_diff2_changed?: () -> bool

    def approximation_quiz_diff2_change: () -> [ ::Integer?, ::Integer? ]

    def approximation_quiz_diff2_will_change!: () -> void

    def approximation_quiz_diff2_was: () -> ::Integer?

    def approximation_quiz_diff2_previously_changed?: () -> bool

    def approximation_quiz_diff2_previous_change: () -> ::Array[::Integer?]?

    def approximation_quiz_diff2_previously_was: () -> ::Integer?

    def approximation_quiz_diff2_before_last_save: () -> ::Integer?

    def approximation_quiz_diff2_change_to_be_saved: () -> ::Array[::Integer?]?

    def approximation_quiz_diff2_in_database: () -> ::Integer?

    def saved_change_to_approximation_quiz_diff2: () -> ::Array[::Integer?]?

    def saved_change_to_approximation_quiz_diff2?: () -> bool

    def will_save_change_to_approximation_quiz_diff2?: () -> bool

    def restore_approximation_quiz_diff2!: () -> void

    def clear_approximation_quiz_diff2_change: () -> void

    def tiebreaker: () -> ::Integer

    def tiebreaker=: (::Integer) -> ::Integer

    def tiebreaker?: () -> bool

    def tiebreaker_changed?: () -> bool

    def tiebreaker_change: () -> [ ::Integer?, ::Integer? ]

    def tiebreaker_will_change!: () -> void

    def tiebreaker_was: () -> ::Integer?

    def tiebreaker_previously_changed?: () -> bool

    def tiebreaker_previous_change: () -> ::Array[::Integer?]?

    def tiebreaker_previously_was: () -> ::Integer?

    def tiebreaker_before_last_save: () -> ::Integer?

    def tiebreaker_change_to_be_saved: () -> ::Array[::Integer?]?

    def tiebreaker_in_database: () -> ::Integer?

    def saved_change_to_tiebreaker: () -> ::Array[::Integer?]?

    def saved_change_to_tiebreaker?: () -> bool

    def will_save_change_to_tiebreaker?: () -> bool

    def restore_tiebreaker!: () -> void

    def clear_tiebreaker_change: () -> void

    def created_at: () -> ::ActiveSupport::TimeWithZone

    def created_at=: (::ActiveSupport::TimeWithZone) -> ::ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ::ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ::ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ::ActiveSupport::TimeWithZone

    def updated_at=: (::ActiveSupport::TimeWithZone) -> ::ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ::ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ::ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void
  end
  include GeneratedAttributeMethods

  def player: () -> ::Player
  def player=: (::Player?) -> ::Player?
  def reload_player: () -> ::Player?
  def build_player: (untyped) -> ::Player
  def create_player: (untyped) -> ::Player
  def create_player!: (untyped) -> ::Player
  module GeneratedAssociationMethods
  end
  include GeneratedAssociationMethods

  def self.round2_seeded: () -> ::YontakuPlayerResult::ActiveRecord_Relation

  module GeneratedRelationMethods
    def round2_seeded: () -> ::YontakuPlayerResult::ActiveRecord_Relation
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include ::YontakuPlayerResult::GeneratedRelationMethods
    include ::_ActiveRecord_Relation[::YontakuPlayerResult, ::Integer]
    include ::Enumerable[::YontakuPlayerResult]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include ::YontakuPlayerResult::GeneratedRelationMethods
    include ::_ActiveRecord_Relation[::YontakuPlayerResult, ::Integer]
  end
end
