class Score < ::ApplicationRecord
  extend ::_ActiveRecord_Relation_ClassMethods[::Score, ::Score::ActiveRecord_Relation, ::Integer]

  module GeneratedAttributeMethods
    def id: () -> ::Integer

    def id=: (::Integer) -> ::Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ ::Integer?, ::Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> ::Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> ::Array[::Integer?]?

    def id_previously_was: () -> ::Integer?

    def id_before_last_save: () -> ::Integer?

    def id_change_to_be_saved: () -> ::Array[::Integer?]?

    def id_in_database: () -> ::Integer?

    def saved_change_to_id: () -> ::Array[::Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def matching_id: () -> ::Integer

    def matching_id=: (::Integer) -> ::Integer

    def matching_id?: () -> bool

    def matching_id_changed?: () -> bool

    def matching_id_change: () -> [ ::Integer?, ::Integer? ]

    def matching_id_will_change!: () -> void

    def matching_id_was: () -> ::Integer?

    def matching_id_previously_changed?: () -> bool

    def matching_id_previous_change: () -> ::Array[::Integer?]?

    def matching_id_previously_was: () -> ::Integer?

    def matching_id_before_last_save: () -> ::Integer?

    def matching_id_change_to_be_saved: () -> ::Array[::Integer?]?

    def matching_id_in_database: () -> ::Integer?

    def saved_change_to_matching_id: () -> ::Array[::Integer?]?

    def saved_change_to_matching_id?: () -> bool

    def will_save_change_to_matching_id?: () -> bool

    def restore_matching_id!: () -> void

    def clear_matching_id_change: () -> void

    def score_operation_id: () -> ::Integer

    def score_operation_id=: (::Integer) -> ::Integer

    def score_operation_id?: () -> bool

    def score_operation_id_changed?: () -> bool

    def score_operation_id_change: () -> [ ::Integer?, ::Integer? ]

    def score_operation_id_will_change!: () -> void

    def score_operation_id_was: () -> ::Integer?

    def score_operation_id_previously_changed?: () -> bool

    def score_operation_id_previous_change: () -> ::Array[::Integer?]?

    def score_operation_id_previously_was: () -> ::Integer?

    def score_operation_id_before_last_save: () -> ::Integer?

    def score_operation_id_change_to_be_saved: () -> ::Array[::Integer?]?

    def score_operation_id_in_database: () -> ::Integer?

    def saved_change_to_score_operation_id: () -> ::Array[::Integer?]?

    def saved_change_to_score_operation_id?: () -> bool

    def will_save_change_to_score_operation_id?: () -> bool

    def restore_score_operation_id!: () -> void

    def clear_score_operation_id_change: () -> void

    def status: () -> ::String?

    def status=: (::String?) -> ::String?

    def status?: () -> bool

    def status_changed?: () -> bool

    def status_change: () -> [ ::String?, ::String? ]

    def status_will_change!: () -> void

    def status_was: () -> ::String?

    def status_previously_changed?: () -> bool

    def status_previous_change: () -> ::Array[::String?]?

    def status_previously_was: () -> ::String?

    def status_before_last_save: () -> ::String?

    def status_change_to_be_saved: () -> ::Array[::String?]?

    def status_in_database: () -> ::String?

    def saved_change_to_status: () -> ::Array[::String?]?

    def saved_change_to_status?: () -> bool

    def will_save_change_to_status?: () -> bool

    def restore_status!: () -> void

    def clear_status_change: () -> void

    def points: () -> ::Integer

    def points=: (::Integer) -> ::Integer

    def points?: () -> bool

    def points_changed?: () -> bool

    def points_change: () -> [ ::Integer?, ::Integer? ]

    def points_will_change!: () -> void

    def points_was: () -> ::Integer?

    def points_previously_changed?: () -> bool

    def points_previous_change: () -> ::Array[::Integer?]?

    def points_previously_was: () -> ::Integer?

    def points_before_last_save: () -> ::Integer?

    def points_change_to_be_saved: () -> ::Array[::Integer?]?

    def points_in_database: () -> ::Integer?

    def saved_change_to_points: () -> ::Array[::Integer?]?

    def saved_change_to_points?: () -> bool

    def will_save_change_to_points?: () -> bool

    def restore_points!: () -> void

    def clear_points_change: () -> void

    def misses: () -> ::Integer

    def misses=: (::Integer) -> ::Integer

    def misses?: () -> bool

    def misses_changed?: () -> bool

    def misses_change: () -> [ ::Integer?, ::Integer? ]

    def misses_will_change!: () -> void

    def misses_was: () -> ::Integer?

    def misses_previously_changed?: () -> bool

    def misses_previous_change: () -> ::Array[::Integer?]?

    def misses_previously_was: () -> ::Integer?

    def misses_before_last_save: () -> ::Integer?

    def misses_change_to_be_saved: () -> ::Array[::Integer?]?

    def misses_in_database: () -> ::Integer?

    def saved_change_to_misses: () -> ::Array[::Integer?]?

    def saved_change_to_misses?: () -> bool

    def will_save_change_to_misses?: () -> bool

    def restore_misses!: () -> void

    def clear_misses_change: () -> void

    def stars: () -> ::Integer

    def stars=: (::Integer) -> ::Integer

    def stars?: () -> bool

    def stars_changed?: () -> bool

    def stars_change: () -> [ ::Integer?, ::Integer? ]

    def stars_will_change!: () -> void

    def stars_was: () -> ::Integer?

    def stars_previously_changed?: () -> bool

    def stars_previous_change: () -> ::Array[::Integer?]?

    def stars_previously_was: () -> ::Integer?

    def stars_before_last_save: () -> ::Integer?

    def stars_change_to_be_saved: () -> ::Array[::Integer?]?

    def stars_in_database: () -> ::Integer?

    def saved_change_to_stars: () -> ::Array[::Integer?]?

    def saved_change_to_stars?: () -> bool

    def will_save_change_to_stars?: () -> bool

    def restore_stars!: () -> void

    def clear_stars_change: () -> void

    def rank: () -> ::Integer?

    def rank=: (::Integer?) -> ::Integer?

    def rank?: () -> bool

    def rank_changed?: () -> bool

    def rank_change: () -> [ ::Integer?, ::Integer? ]

    def rank_will_change!: () -> void

    def rank_was: () -> ::Integer?

    def rank_previously_changed?: () -> bool

    def rank_previous_change: () -> ::Array[::Integer?]?

    def rank_previously_was: () -> ::Integer?

    def rank_before_last_save: () -> ::Integer?

    def rank_change_to_be_saved: () -> ::Array[::Integer?]?

    def rank_in_database: () -> ::Integer?

    def saved_change_to_rank: () -> ::Array[::Integer?]?

    def saved_change_to_rank?: () -> bool

    def will_save_change_to_rank?: () -> bool

    def restore_rank!: () -> void

    def clear_rank_change: () -> void

    def created_at: () -> ::ActiveSupport::TimeWithZone

    def created_at=: (::ActiveSupport::TimeWithZone) -> ::ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ::ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ::ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ::ActiveSupport::TimeWithZone

    def updated_at=: (::ActiveSupport::TimeWithZone) -> ::ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ::ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ::ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void
  end
  include GeneratedAttributeMethods

  def matching: () -> ::Matching
  def matching=: (::Matching?) -> ::Matching?
  def reload_matching: () -> ::Matching?
  def build_matching: (untyped) -> ::Matching
  def create_matching: (untyped) -> ::Matching
  def create_matching!: (untyped) -> ::Matching
  def score_operation: () -> ::ScoreOperation
  def score_operation=: (::ScoreOperation?) -> ::ScoreOperation?
  def reload_score_operation: () -> ::ScoreOperation?
  def build_score_operation: (untyped) -> ::ScoreOperation
  def create_score_operation: (untyped) -> ::ScoreOperation
  def create_score_operation!: (untyped) -> ::ScoreOperation
  module GeneratedAssociationMethods
  end
  include GeneratedAssociationMethods

  module GeneratedRelationMethods
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include ::Score::GeneratedRelationMethods
    include ::_ActiveRecord_Relation[::Score, ::Integer]
    include ::Enumerable[::Score]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include ::Score::GeneratedRelationMethods
    include ::_ActiveRecord_Relation[::Score, ::Integer]
  end
end
